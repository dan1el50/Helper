@page "/humans"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Humans Management</PageTitle>

<h3>Humans</h3>

@if (humans is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Surname</th>
                <th>Date of Birth</th>
                <th>Place of Birth</th>
                <th>Age</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var human in humans)
            {
                <tr>
                    <td>@human.Name</td>
                    <td>@human.Surname</td>
                    <td>@human.DateOfBirth.ToShortDateString()</td>
                    <td>@human.PlaceOfBirth</td>
                    <td>@human.Age</td>
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="() => SelectHumanForEdit(human)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteHuman(human.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<hr />

<h4>@(isEditing ? "Edit Human" : "Add New Human")</h4>

<EditForm Model="humanToEdit" OnValidSubmit="SaveHuman">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Name:</label>
        <InputText class="form-control" @bind-Value="humanToEdit.Name" />
    </div>
    <div class="mb-3">
        <label class="form-label">Surname:</label>
        <InputText class="form-control" @bind-Value="humanToEdit.Surname" />
    </div>
    <div class="mb-3">
        <label class="form-label">Date of Birth:</label>
        <InputDate class="form-control" @bind-Value="humanToEdit.DateOfBirth" />
    </div>
    <div class="mb-3">
        <label class="form-label">Place of Birth:</label>
        <InputText class="form-control" @bind-Value="humanToEdit.PlaceOfBirth" />
    </div>

    <button type="submit" class="btn btn-success">Save</button>
    @if (isEditing)
    {
        <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
    }
</EditForm>

@code {
    private List<AutumnBlazorApp.Shared.DTOs.HumanDto>? humans;
    // --- FIX #1: Initialize required properties ---
    private AutumnBlazorApp.Shared.DTOs.HumanDto humanToEdit = new() { Name = "", Surname = "", PlaceOfBirth = "" };
    private bool isEditing = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadHumans();
    }

    private async Task LoadHumans()
    {
        humans = await Http.GetFromJsonAsync<List<AutumnBlazorApp.Shared.DTOs.HumanDto>>("api/humans");
    }

    private void SelectHumanForEdit(AutumnBlazorApp.Shared.DTOs.HumanDto human)
    {
        humanToEdit = new()
        {
            Id = human.Id,
            Name = human.Name,
            Surname = human.Surname,
            DateOfBirth = human.DateOfBirth,
            PlaceOfBirth = human.PlaceOfBirth
        };
        isEditing = true;
    }

    private async Task SaveHuman()
    {
        if (isEditing)
        {
            await Http.PutAsJsonAsync($"api/humans/{humanToEdit.Id}", humanToEdit);
        }
        else
        {
            await Http.PostAsJsonAsync("api/humans", humanToEdit);
        }

        await LoadHumans();
        CancelEdit();
    }

    private async Task DeleteHuman(int id)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this person?");
        if (confirmed)
        {
            await Http.DeleteAsync($"api/humans/{id}");
            await LoadHumans();
        }
    }

    private void CancelEdit()
    {
        // --- FIX #2: Initialize required properties ---
        humanToEdit = new() { Name = "", Surname = "", PlaceOfBirth = "" };
        isEditing = false;
    }
}
